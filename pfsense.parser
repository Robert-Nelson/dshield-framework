# OpenBSD Packet Filter parser (patched for pfSense) 
# http://www.pfsense.org/
# Patched for pfSense pf logs by Klaus Lichtenwalder
# (http://lists.sans.org/pipermail/list/2008-August/027270.html)
# Patched version submitted by Raman Gupta
# Rewritten for pfSense version 2.2 by Robert Nelson
#
# Requires the perl module p5-Net-IP.
#
# Edit dshield.cnf as needed
# 	- change the include/exclude files' paths from /etc/ to /usr/local/etc/
# 	- set userid to your dshield submission id
# 	- comment out the "log=/var/log/messages" line since stdin is used.
#	- set whereto=-
#
# Make the following changes to pfsense.pl
# 	- Change the path to perl in the first line to /usr/local/bin/perl
#
# Run a command similar to the following
#
# clog /var/log/filter.log | pfsense_preprocessor.php | pfsense.pl -config=/usr/local/etc/dshield.cnf | pfsense_mailer.php
#

use Net::IP;

# DShield Client Framework
# Framework for parsing of the log line
#
# Expects the input in this format:
#	Jul 11 06:32:13 block em0 TCP:FPA 192.168.1.1:48561 192.168.1.1:443
# Field description:
# 	Month Day HH:MM:SS Action Interface Protocol(:TCPFLAGS) SourceIP(:Port) DestinationIP(:Port)
#
# @rline - array to be returned holding the required values for Dshield
#  $rline[0] - date in yyyy-mm-dd HH:MM:SS tz format
#  $rline[1] - Dshield user ID
#  $rline[2] - number of lines this log entry represents (normally 1)
#  $rline[3] - source IP in dotted decimal format (x.x.x.x)
#  $rline[4] - numeric source port for TCP/UDP or the ICMP type
#  $rline[5] - destination IP in dotted decimal format (x.x.x.x)
#  $rline[6] - numeric destination port for TCP/UDP or the ICMP code
#  $rline[7] - protocol in uppercase
#  $rline[8] - TCP flags (SFAPRU12)
#
# Global variables already defined by calling routine
# $this_year - Current year in YYYY format
# $this_month - Current month in numerical format.  '1' for Jan.
# @Month  Hash of three letter abgreviations for months.  
# $tz - (i.e. -04:00 for EDT)
# $userid - Dshield user ID
# $line_filter  Regexp that each line must match.  
# $line_exclude Regexp for lines we want to exclude.
# $reason_skipped Fill this with the reason a line isn't processed. 

sub parse {
	my $line = shift;

	my ($day,$month,$year,$hour,$minute,$second,$count,$action,$iface,$protocol,$source,$ipSource,$portSource,$destin,$ipDestin,$portDestin,$protocol,$flags);
	my @rline;

	# Default line filter.  Must contain this.
	$reason_skipped = "Does not contain ' block '"; return 0 unless ( $line =~ / block / );

	# Is this any kind of packet filter log line?
	# $line_filter and $line_exclude are defined in dshield.cnf
	if ($line_filter) { $reason_skipped = "Does not contain $line_filter"; return 0 unless ( $line =~ /$line_filter/ ) }

	# Or maybe something undesirable that we don't want?
	if ($line_exclude) { $reason_skipped = "Excluded because it contains $line_exclude"; return 0 if ( $line =~ /$line_exclude/ ) }

	# Now we attempt to match the line with a regex.

	# This regex should work for any protocol.
	# Jul 11 06:32:13 block em0 TCP:FPA 192.168.1.1:48561 192.168.1.1:443
	# Field description:
	# Month Day HH:MM:SS Action Interface Protocol(:TCPFLAGS) SourceIP(:Port) DestinationIP(:Port)
	if (($month,$day,$hour,$minute,$second,$action,$iface,$protocol,$source,$destin) = ($line =~ m/^([A-Z][a-z]{2}) +(\d{1,2}) (\d+):(\d+):(\d+) +(\S+) +(\S+) +(\S+) +([0-9a-fA-F:]+|(?:\d+\.\d+\.\d+\.\d+(?::\d+)?)) +([0-9a-fA-F:]+|(?:\d+\.\d+\.\d+\.\d+(?::\d+)?))$/ )) { 
		$protocol = 'ICMP6' if ($protocol eq 'ICMPv6');

		if ($protocol =~ m/^TCP:([A-Z]*)$/) {
			$protocol = 'TCP';
			$flags = $1;
			if (index($flags, 'S') == -1) {
				$reason_skipped = "TCP non-sync packet- $flags";
				return 0;
			}
		} else {
			$flags = '';
		}

		if ($protocol eq 'TCP' or $protocol eq 'UDP' or $protocol eq 'ICMP' or $protocol eq 'ICMP6') {
			($ipSource, $portSource) = ($source =~ m/^(.*):([0-9]+)$/);
			($ipDestin, $portDestin) = ($destin =~ m/^(.*):([0-9]+)$/);
		} else {
			($ipSource, $portSource) = ($source, '???');
			($ipDestin, $portDestin) = ($destin, '???');
		}

		my $ip = Net::IP->new($ipSource);

		if ($ip->iptype() ne 'PUBLIC' and $ip->iptype ne 'GLOBAL-UNICAST') {
			$reason_skipped = "Private source IP address - $ipSource";
			return 0;
		}
	} else {
		$reason_skipped = "Can't parse this line. $line";
		return 0;
	}

	# Convert month from 'Apr' format to '04' format 
	$month=$Month{$month};

	# Year isn't in the log!  So guess what year it is.
	$year=$this_year;
	$year-- if ($month>$this_month);

	$count="1";

	if ($protocol =~ m/TCP|UDP|ICMP6?/ ) {
		# We are happy
	} else {
		# We are not happy
		$reason_skipped = "This converter doesn't support $protocol";
		return 0;
	}

	# Good as far as we know.  Now assemble the data into a DShield record
	# Date time $tz
	$rline[0]=sprintf("%0.4d-%0.2d-%0.2d %0.2d:%0.2d:%0.2d %s",$year,$month,$day,$hour,$minute,$second,$tz);
	$rline[1]=$userid;
	$rline[2]=$count;
	$rline[3]=$ipSource;
	$rline[4]=$portSource;
	$rline[5]=$ipDestin;
	$rline[6]=$portDestin;
	$rline[7]=$protocol;
	$rline[8]=$flags;

	return @rline;
}
