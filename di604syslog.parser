# DShield D-Link DI604 syslog parser
#
# D-Link DI604 syslog defaults to saving logs in /var/logs/messages, so set
# 'log=/var/log/messages' in dshield.cnf.
#
# Set the 'line_filter' variable in dshield.cnf so it is a string that 
# is contained in the log lines that the parser should process,
# such as the di604 hostname.
#
# Typical input lines
#Apr 10 04:13:25 di604 Unrecognized attempt blocked from 80.167.147.198:1986 to 81.227.73.40 UDP:2463^M ^J
#Apr 10 04:13:32 di604 last message repeated 2 times^J

my $PARSER_VERSION = "2005-04-12";

#
# Framework for parsing of the log line
#
# @rline - array to be returned holding the required values for Dshield
#  $rline[0] - date in yyyy-mm-dd HH:MM:SS tz format
#  $rline[1] - Dshield user ID
#  $rline[2] - number of lines this log entry represents (normally 1)
#  $rline[3] - source IP in dotted decimal format (x.x.x.x)
#  $rline[4] - numeric source port for TCP/UDP or ithe ICMP code
#  $rline[5] - destination IP in dotted decimal format (x.x.x.x)
#  $rline[6] - numeric destination port for TCP/UDP or the ICMP type
#  $rline[7] - protocol in uppercase
#  $rline[8] - TCP flags (SFAPRU12)
#
# Global variables defined by calling routine
# $this_year - Current year in YYYY format
# $this_month - Current month in numerical format.  '1' for Jan.
# @Month  Hash of three letter abgreviations for months.  
# $tz - (i.e. -04:00 for EDT)
# $userid - Dshield user ID
# $line_filter  Regex that each line must match.  
# $line_exclude Regex for lines we want to exclude.
# $reason_skipped  You fill this with the reason the line wasn't parsed.

sub parse {
	my $line=shift;
	my @rline;
	my (%param, $name, $value);
	my ($srcpt, $dstpt);
	my $flags="";

	# Is this any kind of packet filter log line?
	if ($line_filter) { 
		$reason_skipped = "Does not contain '$line_filter'"; return 0 unless ( $line =~ /$line_filter/ ) 
	}

	# Or maybe it has something undesirable that we don't want to see?
	if ($line_exclude) { $reason_skipped = "Contains `$line_exclude`"; return 0 if ( $line =~ /$line_exclude/ ) }

	my @fields = split(' ', $line);

	# First do date/time
	my $month=$fields[0];
	my $day=$fields[1];
	my $time=$fields[2];
	$month=$Month{$month};

	# syslog does not have the year.  So we take a guess at it.
	# Lets hope that we are't processing more than one year.  :-(
	if ($month <= $this_month) { 
		$year = $this_year;
	} else {
		$year = $this_year - 1;
	}
	my $date=sprintf("%04d-%02d-%02d %s %s",$year,$month,$day,$time,$tz);

	$rline[0] = $date;
	$rline[1] = $userid;
	$rline[2] = "1";
	($rline[3], $rline[4]) = split(':', $fields[8]);
	$rline[5] = $fields[10];
	$fields[11] =~ /(\w+):(\d+)/;
	$rline[6] = $2;
	$rline[7] = $1;
	$rline[8] = "";

    return @rline;
}
