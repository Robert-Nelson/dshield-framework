# Gauntlet parser
my $PARSER_VERSION = "2002-04-27";

# Framework for parsing of the log line
#
# @rline - array to be returned holding the required values for Dshield
#  $rline[0] - date in yyyy-mm-dd HH:MM:SS tz format
#  $rline[1] - Dshield user ID
#  $rline[2] - number of lines this log entry represents (normally 1)
#  $rline[3] - source IP in dotted decimal format (x.x.x.x)
#  $rline[4] - numeric source port for TCP/UDP or ithe ICMP code
#  $rline[5] - destination IP in dotted decimal format (x.x.x.x)
#  $rline[6] - numeric destination port for TCP/UDP or the ICMP type
#  $rline[7] - protocol in uppercase
#  $rline[8] - TCP flags (SFAPRU12)
#
# Global variables already defined by calling routine
# $this_year - Current year in YYYY format
# $this_month - Current month in numerical format.  '1' for Jan.
# @Month  Hash of three letter abgreviations for months.  
# $tz - (i.e. -04:00 for EDT)
# $userid - Dshield user ID
# $line_filter  Regexp that each line must match.  
# $line_exclude Regexp for lines we want to exclude.
# $reason_skipped Fill this with the reason a line isn't processed. 

sub parse {
    my $line = shift;

    my ($day,$month,$year,$hour,$minute,$second,$count,$action,$ipSource,$portSource,$ipDestin,$portDestin,$protocol);
    my ($extra,$flags);
    my @rline;

	# Default line filter.  Must contain this.
    $reason_skipped = "Does not contain ' securityalert: '"; return 0 unless ( $line =~ / securityalert: / );

	# Is this any kind of packet filter log line?
	# $line_filter and $line_exclude are defined in dshield.cnf
	if ($line_filter) { $reason_skipped = "Does not contain $line_filter"; return 0 unless ( $line =~ /$line_filter/ ) }

	# Or maybe something undesirable that we don't want?
	if ($line_exclude) { $reason_skipped = "Excluded because it contains $line_exclude"; return 0 if ( $line =~ /$line_exclude/ ) }

	# Now we attempt to match the line with a regex.

	# This regex should work for TCP and UDP.
	# Don't have one yet for ICMP
	# <timestamp> <hostname> unix: securityalert: <protocol> if=<interface> from <source IP>:<source port> to <destination IP> on port <destination port>
	# Apr 25 07:07:38 xxx.xxx.com unix: securityalert: tcp if=hme0 from 212.1.2.3:4098 to 64.4.5.6 on unserved port 8010
	# Field description:                                                                                                   Month              Day    HH    MM    SS                  Protocol        SrcIP  SrcPrt        DstIP          DstPort
    if (($month,$day,$hour,$minute,$second,$extra,$protocol,$ipSource,$portSource,$ipDestin,$portDestin) = ($line =~ m/^([A-Z][a-z]{2}) +(\d{1,2}) (\d+):(\d+):(\d+)(.*securityalert:) (\S*) if=.* +([0-9.]*):(\d*) +to +([0-9.]*).* port (\d*)/)) {; 
	} else {
		$reason_skipped = "Can't parse this line.";
		return 0;
	}

	# Convert month from 'Apr' format to '04' format 
	$month=$Month{$month};

	# Year isn't in the log!  So guess what year it is.
	$year=$this_year;
	$year-- if ($month>$this_month);

	$count="1";
	$flags="";

    # Uppercase the protocol field
    $protocol = uc $protocol;
	if ($protocol =~ m/TCP|UDP/ ) {
		# We are happy
	} else {
		# We are not happy
		$reason_skipped = "This converter doesn't support $protocol";
		return 0;
	}

	# Good as far as we know.  Now assemble the data into a DShield record
	# Date time $tz
    $rline[0]=sprintf("%0.4d-%0.2d-%0.2d %0.2d:%0.2d:%0.2d %s",$year,$month,$day,$hour,$minute,$second,$tz);
    $rline[1]=$userid;
    $rline[2]=$count;
    $rline[3]=$ipSource;
    $rline[4]=$portSource;
    $rline[5]=$ipDestin;
    $rline[6]=$portDestin;
    $rline[7]=$protocol;
    $rline[8]=$flags;

    return @rline;
}
